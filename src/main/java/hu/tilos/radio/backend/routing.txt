   post("/api/v1/episode/:id/bookmark", spark.authorized(Role.ADMIN, (req, res, session) ->
                bookmarkService.create(session, req.params("id"), gson.fromJson(req.body(), BookmarkToSave.class))), jsonResponse);

        get("/api/v1/episode", (req, res) ->
                episodeService.listEpisodes(spark.longParam(req, "start"), spark.longParam(req, "end")), jsonResponse);
        get("/api/v1/episode/next", (req, res) ->
                episodeService.next(), jsonResponse);
        get("/api/v1/episode/last", (req, res) ->
                episodeService.last(), jsonResponse);
        get("/api/v1/episode/lastWeek", (req, res) ->
                episodeService.lastWeek(), jsonResponse);
        get("/api/v1/episode/now", (req, res) ->
                episodeService.now(), jsonResponse);
        get("/api/v1/episode/:id", (req, res) ->
                episodeService.get(req.params("id")), jsonResponse);
        get("/api/v1/episode/:show/:year/:month/:day", (req, res) ->
                        episodeService.getByDate(req.params("show"),
                                Integer.parseInt(req.params("year")),
                                Integer.parseInt(req.params("month")),
                                Integer.parseInt(req.params("day"))),
                jsonResponse);
        post("/api/v1/episode",
                spark.authorized(Role.AUTHOR, (req, res, session) ->
                        episodeService.create(gson.fromJson(req.body(), EpisodeToSave.class))), jsonResponse);
        put("/api/v1/episode/:id",
                spark.authorized(Role.AUTHOR, (req, res, session) ->
                        episodeService.update(req.params("id"), gson.fromJson(req.body(), EpisodeToSave.class))), jsonResponse);

        get("/api/v1/show/:alias/episodes", (req, res) ->
                episodeService.listEpisodes(req.params("alias"),
                        Long.valueOf(req.queryParams("start")),
                        Long.valueOf(req.queryParams("end"))
                ), jsonResponse);


        get("/feed/weekly", (req, res) -> {
            res.type("application/atom+xml");
            return feedService.weeklyFeed();
        }, new FeedTransformer());

        get("/feed/podcast", (req, res) -> {
            res.type("application/atom+xml");
            return feedService.tilosFeed(null);
        }, new FeedTransformer());

        get("/feed/podcast/:type", (req, res) -> {
            res.type("application/atom+xml");
            return feedService.tilosFeed(req.params("type"));
        }, new FeedTransformer());


        get("/feed/weekly/:type", (req, res) -> {
            res.type("application/atom+xml");
            return feedService.weeklyFeed(req.params("type"));
        }, new FeedTransformer());
        get("/feed/show/itunes/:alias", (req, res) -> {
            res.type("application/atom+xml");
            return feedService.feed(req.params("alias"), null);
        }, new FeedTransformer());
        get("/feed/show/:alias", (req, res) -> {
            res.type("application/atom+xml");
            return feedService.feed(req.params("alias"), null);
        }, new FeedTransformer());
        get("/feed/show/:alias/:year", (req, res) -> {
            res.type("application/atom+xml");
            return feedService.feed(req.params("alias"), req.params("year"));
        }, new FeedTransformer());


        get("/api/v1/m3u/lastweek", (req, res) -> {
            return asM3u(res, m3uService.lastWeek(req.queryParams("stream"), req.queryParams("type")));
        });


    }

    private Object asM3u(Response res, String output) throws Exception {
        res.type("audio/x-mpegurl; charset=iso-8859-2");
        try (OutputStreamWriter writer = new OutputStreamWriter(res.raw().getOutputStream(), Charset.forName("ISO-8859-2"))) {
            writer.write(output);
        }
        return null;
    }
